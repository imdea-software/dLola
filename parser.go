// Code generated by pigeon; DO NOT EDIT.

package dLola

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Input",
			pos:  position{line: 10, col: 1, offset: 42},
			expr: &actionExpr{
				pos: position{line: 10, col: 10, offset: 51},
				run: (*parser).callonInput1,
				expr: &seqExpr{
					pos: position{line: 10, col: 10, offset: 51},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 10, col: 10, offset: 51},
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 10, offset: 51},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 10, col: 13, offset: 54},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 15, offset: 56},
								name: "Topo",
							},
						},
						&labeledExpr{
							pos:   position{line: 10, col: 20, offset: 61},
							label: "m",
							expr: &zeroOrMoreExpr{
								pos: position{line: 10, col: 23, offset: 64},
								expr: &ruleRefExpr{
									pos:  position{line: 10, col: 23, offset: 64},
									name: "MonitorDeclaration",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 44, offset: 85},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Topo",
			pos:  position{line: 14, col: 1, offset: 137},
			expr: &choiceExpr{
				pos: position{line: 14, col: 9, offset: 145},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 9, offset: 145},
						run: (*parser).callonTopo2,
						expr: &ruleRefExpr{
							pos:  position{line: 14, col: 9, offset: 145},
							name: "CLIQUE",
						},
					},
					&actionExpr{
						pos: position{line: 15, col: 9, offset: 201},
						run: (*parser).callonTopo4,
						expr: &ruleRefExpr{
							pos:  position{line: 15, col: 9, offset: 201},
							name: "LINE",
						},
					},
					&actionExpr{
						pos: position{line: 16, col: 4, offset: 250},
						run: (*parser).callonTopo6,
						expr: &ruleRefExpr{
							pos:  position{line: 16, col: 4, offset: 250},
							name: "RING",
						},
					},
					&actionExpr{
						pos: position{line: 17, col: 4, offset: 299},
						run: (*parser).callonTopo8,
						expr: &ruleRefExpr{
							pos:  position{line: 17, col: 4, offset: 299},
							name: "RINGSHORT",
						},
					},
					&actionExpr{
						pos: position{line: 18, col: 4, offset: 353},
						run: (*parser).callonTopo10,
						expr: &ruleRefExpr{
							pos:  position{line: 18, col: 4, offset: 353},
							name: "STAR",
						},
					},
				},
			},
		},
		{
			name: "MonitorDeclaration",
			pos:  position{line: 20, col: 1, offset: 401},
			expr: &actionExpr{
				pos: position{line: 20, col: 23, offset: 423},
				run: (*parser).callonMonitorDeclaration1,
				expr: &seqExpr{
					pos: position{line: 20, col: 23, offset: 423},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 20, col: 23, offset: 423},
							expr: &ruleRefExpr{
								pos:  position{line: 20, col: 23, offset: 423},
								name: "_",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 20, col: 26, offset: 426},
							name: "AT",
						},
						&labeledExpr{
							pos:   position{line: 20, col: 29, offset: 429},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 20, col: 31, offset: 431},
								name: "NumLiteral",
							},
						},
						&litMatcher{
							pos:        position{line: 20, col: 42, offset: 442},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 20, col: 46, offset: 446},
							label: "d",
							expr: &ruleRefExpr{
								pos:  position{line: 20, col: 48, offset: 448},
								name: "Decls",
							},
						},
						&litMatcher{
							pos:        position{line: 20, col: 54, offset: 454},
							val:        "}",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 20, col: 58, offset: 458},
							expr: &ruleRefExpr{
								pos:  position{line: 20, col: 58, offset: 458},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "Decls",
			pos:  position{line: 22, col: 1, offset: 495},
			expr: &actionExpr{
				pos: position{line: 22, col: 11, offset: 505},
				run: (*parser).callonDecls1,
				expr: &seqExpr{
					pos: position{line: 22, col: 11, offset: 505},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 22, col: 11, offset: 505},
							expr: &ruleRefExpr{
								pos:  position{line: 22, col: 11, offset: 505},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 22, col: 14, offset: 508},
							label: "d",
							expr: &zeroOrMoreExpr{
								pos: position{line: 22, col: 17, offset: 511},
								expr: &ruleRefExpr{
									pos:  position{line: 22, col: 17, offset: 511},
									name: "Declaration",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Declaration",
			pos:  position{line: 28, col: 1, offset: 670},
			expr: &choiceExpr{
				pos: position{line: 28, col: 16, offset: 685},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 28, col: 16, offset: 685},
						run: (*parser).callonDeclaration2,
						expr: &labeledExpr{
							pos:   position{line: 28, col: 16, offset: 685},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 28, col: 18, offset: 687},
								name: "InputStreamDecl",
							},
						},
					},
					&actionExpr{
						pos: position{line: 29, col: 8, offset: 729},
						run: (*parser).callonDeclaration5,
						expr: &labeledExpr{
							pos:   position{line: 29, col: 8, offset: 729},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 29, col: 10, offset: 731},
								name: "Const",
							},
						},
					},
					&actionExpr{
						pos: position{line: 31, col: 8, offset: 825},
						run: (*parser).callonDeclaration8,
						expr: &labeledExpr{
							pos:   position{line: 31, col: 8, offset: 825},
							label: "d",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 10, offset: 827},
								name: "OutputDefinition",
							},
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 34, col: 1, offset: 904},
			expr: &actionExpr{
				pos: position{line: 34, col: 10, offset: 913},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 34, col: 10, offset: 913},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 34, col: 10, offset: 913},
							name: "CONST",
						},
						&labeledExpr{
							pos:   position{line: 34, col: 16, offset: 919},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 34, col: 18, offset: 921},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 34, col: 23, offset: 926},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 34, col: 25, offset: 928},
								name: "Name",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 34, col: 30, offset: 933},
							name: "ASSIGN",
						},
						&labeledExpr{
							pos:   position{line: 34, col: 37, offset: 940},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 34, col: 39, offset: 942},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "InputStreamDecl",
			pos:  position{line: 39, col: 1, offset: 1133},
			expr: &actionExpr{
				pos: position{line: 39, col: 20, offset: 1152},
				run: (*parser).callonInputStreamDecl1,
				expr: &seqExpr{
					pos: position{line: 39, col: 20, offset: 1152},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 39, col: 20, offset: 1152},
							name: "INPUT",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 26, offset: 1158},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 28, offset: 1160},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 33, offset: 1165},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 35, offset: 1167},
								name: "Name",
							},
						},
					},
				},
			},
		},
		{
			name: "OutputDefinition",
			pos:  position{line: 43, col: 1, offset: 1217},
			expr: &actionExpr{
				pos: position{line: 43, col: 21, offset: 1237},
				run: (*parser).callonOutputDefinition1,
				expr: &seqExpr{
					pos: position{line: 43, col: 21, offset: 1237},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 43, col: 21, offset: 1237},
							label: "d",
							expr: &ruleRefExpr{
								pos:  position{line: 43, col: 23, offset: 1239},
								name: "DefOut",
							},
						},
						&labeledExpr{
							pos:   position{line: 43, col: 30, offset: 1246},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 43, col: 32, offset: 1248},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 43, col: 37, offset: 1253},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 43, col: 39, offset: 1255},
								name: "Name",
							},
						},
						&labeledExpr{
							pos:   position{line: 43, col: 44, offset: 1260},
							label: "le",
							expr: &zeroOrOneExpr{
								pos: position{line: 43, col: 47, offset: 1263},
								expr: &ruleRefExpr{
									pos:  position{line: 43, col: 47, offset: 1263},
									name: "LazyEval",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 43, col: 57, offset: 1273},
							name: "ASSIGN",
						},
						&labeledExpr{
							pos:   position{line: 43, col: 64, offset: 1280},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 43, col: 66, offset: 1282},
								name: "Block",
							},
						},
					},
				},
			},
		},
		{
			name: "DefOut",
			pos:  position{line: 47, col: 1, offset: 1346},
			expr: &choiceExpr{
				pos: position{line: 47, col: 11, offset: 1356},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1356},
						name: "DEFINE",
					},
					&actionExpr{
						pos: position{line: 47, col: 20, offset: 1365},
						run: (*parser).callonDefOut3,
						expr: &ruleRefExpr{
							pos:  position{line: 47, col: 20, offset: 1365},
							name: "OUTPUT",
						},
					},
				},
			},
		},
		{
			name: "LazyEval",
			pos:  position{line: 51, col: 1, offset: 1409},
			expr: &choiceExpr{
				pos: position{line: 51, col: 13, offset: 1421},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 51, col: 13, offset: 1421},
						run: (*parser).callonLazyEval2,
						expr: &ruleRefExpr{
							pos:  position{line: 51, col: 13, offset: 1421},
							name: "LAZY",
						},
					},
					&actionExpr{
						pos: position{line: 52, col: 8, offset: 1455},
						run: (*parser).callonLazyEval4,
						expr: &ruleRefExpr{
							pos:  position{line: 52, col: 8, offset: 1455},
							name: "EVAL",
						},
					},
				},
			},
		},
		{
			name: "Block",
			pos:  position{line: 58, col: 1, offset: 1569},
			expr: &choiceExpr{
				pos: position{line: 58, col: 10, offset: 1578},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 58, col: 10, offset: 1578},
						run: (*parser).callonBlock2,
						expr: &seqExpr{
							pos: position{line: 58, col: 10, offset: 1578},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 58, col: 10, offset: 1578},
									name: "LET",
								},
								&labeledExpr{
									pos:   position{line: 58, col: 14, offset: 1582},
									label: "n",
									expr: &ruleRefExpr{
										pos:  position{line: 58, col: 16, offset: 1584},
										name: "Name",
									},
								},
								&labeledExpr{
									pos:   position{line: 58, col: 21, offset: 1589},
									label: "p",
									expr: &zeroOrMoreExpr{
										pos: position{line: 58, col: 24, offset: 1592},
										expr: &ruleRefExpr{
											pos:  position{line: 58, col: 24, offset: 1592},
											name: "Name",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 58, col: 31, offset: 1599},
									name: "ASSIGN",
								},
								&labeledExpr{
									pos:   position{line: 58, col: 38, offset: 1606},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 58, col: 40, offset: 1608},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 58, col: 45, offset: 1613},
									name: "IN",
								},
								&labeledExpr{
									pos:   position{line: 58, col: 48, offset: 1616},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 58, col: 50, offset: 1618},
										name: "Block",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 10, offset: 1668},
						run: (*parser).callonBlock16,
						expr: &labeledExpr{
							pos:   position{line: 59, col: 10, offset: 1668},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 59, col: 12, offset: 1670},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 61, col: 1, offset: 1726},
			expr: &choiceExpr{
				pos: position{line: 61, col: 9, offset: 1734},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 61, col: 9, offset: 1734},
						run: (*parser).callonExpr2,
						expr: &seqExpr{
							pos: position{line: 61, col: 9, offset: 1734},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 61, col: 9, offset: 1734},
									name: "IF",
								},
								&labeledExpr{
									pos:   position{line: 61, col: 12, offset: 1737},
									label: "p",
									expr: &ruleRefExpr{
										pos:  position{line: 61, col: 14, offset: 1739},
										name: "BooleanExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 61, col: 26, offset: 1751},
									name: "THEN",
								},
								&labeledExpr{
									pos:   position{line: 61, col: 31, offset: 1756},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 61, col: 33, offset: 1758},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 61, col: 38, offset: 1763},
									name: "ELSE",
								},
								&labeledExpr{
									pos:   position{line: 61, col: 43, offset: 1768},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 61, col: 45, offset: 1770},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 62, col: 14, offset: 1828},
						run: (*parser).callonExpr13,
						expr: &labeledExpr{
							pos:   position{line: 62, col: 14, offset: 1828},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 62, col: 16, offset: 1830},
								name: "BooleanExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 63, col: 7, offset: 1866},
						run: (*parser).callonExpr16,
						expr: &labeledExpr{
							pos:   position{line: 63, col: 7, offset: 1866},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 63, col: 9, offset: 1868},
								name: "NumExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 64, col: 7, offset: 1899},
						run: (*parser).callonExpr19,
						expr: &labeledExpr{
							pos:   position{line: 64, col: 7, offset: 1899},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 9, offset: 1901},
								name: "StrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BooleanExpr",
			pos:  position{line: 70, col: 1, offset: 2017},
			expr: &actionExpr{
				pos: position{line: 70, col: 16, offset: 2032},
				run: (*parser).callonBooleanExpr1,
				expr: &seqExpr{
					pos: position{line: 70, col: 16, offset: 2032},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 70, col: 16, offset: 2032},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 70, col: 18, offset: 2034},
								name: "Ands",
							},
						},
						&labeledExpr{
							pos:   position{line: 70, col: 26, offset: 2042},
							label: "b",
							expr: &zeroOrMoreExpr{
								pos: position{line: 70, col: 29, offset: 2045},
								expr: &ruleRefExpr{
									pos:  position{line: 70, col: 29, offset: 2045},
									name: "OrExpr",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrExpr",
			pos:  position{line: 88, col: 1, offset: 2632},
			expr: &actionExpr{
				pos: position{line: 88, col: 16, offset: 2647},
				run: (*parser).callonOrExpr1,
				expr: &seqExpr{
					pos: position{line: 88, col: 16, offset: 2647},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 88, col: 16, offset: 2647},
							name: "OR",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 19, offset: 2650},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 21, offset: 2652},
								name: "Ands",
							},
						},
					},
				},
			},
		},
		{
			name: "Ands",
			pos:  position{line: 90, col: 1, offset: 2686},
			expr: &actionExpr{
				pos: position{line: 90, col: 16, offset: 2701},
				run: (*parser).callonAnds1,
				expr: &seqExpr{
					pos: position{line: 90, col: 16, offset: 2701},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 90, col: 16, offset: 2701},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 90, col: 18, offset: 2703},
								name: "NegExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 90, col: 26, offset: 2711},
							label: "b",
							expr: &zeroOrMoreExpr{
								pos: position{line: 90, col: 29, offset: 2714},
								expr: &ruleRefExpr{
									pos:  position{line: 90, col: 29, offset: 2714},
									name: "AndExpr",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AndExpr",
			pos:  position{line: 96, col: 1, offset: 2869},
			expr: &actionExpr{
				pos: position{line: 96, col: 16, offset: 2884},
				run: (*parser).callonAndExpr1,
				expr: &seqExpr{
					pos: position{line: 96, col: 16, offset: 2884},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 96, col: 16, offset: 2884},
							name: "AND",
						},
						&labeledExpr{
							pos:   position{line: 96, col: 20, offset: 2888},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 96, col: 22, offset: 2890},
								name: "NegExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "NegExpr",
			pos:  position{line: 98, col: 1, offset: 2916},
			expr: &choiceExpr{
				pos: position{line: 98, col: 16, offset: 2931},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 98, col: 16, offset: 2931},
						run: (*parser).callonNegExpr2,
						expr: &seqExpr{
							pos: position{line: 98, col: 16, offset: 2931},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 98, col: 16, offset: 2931},
									name: "NOT",
								},
								&labeledExpr{
									pos:   position{line: 98, col: 20, offset: 2935},
									label: "p",
									expr: &ruleRefExpr{
										pos:  position{line: 98, col: 22, offset: 2937},
										name: "NegExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 99, col: 6, offset: 3000},
						run: (*parser).callonNegExpr7,
						expr: &labeledExpr{
							pos:   position{line: 99, col: 6, offset: 3000},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 8, offset: 3002},
								name: "Primary",
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 101, col: 1, offset: 3030},
			expr: &choiceExpr{
				pos: position{line: 101, col: 14, offset: 3043},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 101, col: 14, offset: 3043},
						run: (*parser).callonPrimary2,
						expr: &seqExpr{
							pos: position{line: 101, col: 14, offset: 3043},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 101, col: 14, offset: 3043},
									val:        "(",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 101, col: 18, offset: 3047},
									expr: &ruleRefExpr{
										pos:  position{line: 101, col: 18, offset: 3047},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 101, col: 21, offset: 3050},
									label: "p",
									expr: &ruleRefExpr{
										pos:  position{line: 101, col: 23, offset: 3052},
										name: "BooleanExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 101, col: 35, offset: 3064},
									val:        ")",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 101, col: 39, offset: 3068},
									expr: &ruleRefExpr{
										pos:  position{line: 101, col: 39, offset: 3068},
										name: "_",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 102, col: 7, offset: 3095},
						run: (*parser).callonPrimary12,
						expr: &labeledExpr{
							pos:   position{line: 102, col: 7, offset: 3095},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 9, offset: 3097},
								name: "NumComparison",
							},
						},
					},
					&actionExpr{
						pos: position{line: 103, col: 7, offset: 3265},
						run: (*parser).callonPrimary15,
						expr: &labeledExpr{
							pos:   position{line: 103, col: 7, offset: 3265},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 9, offset: 3267},
								name: "StrComparison",
							},
						},
					},
					&actionExpr{
						pos: position{line: 104, col: 7, offset: 3365},
						run: (*parser).callonPrimary18,
						expr: &labeledExpr{
							pos:   position{line: 104, col: 7, offset: 3365},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 9, offset: 3367},
								name: "AtomicBool",
							},
						},
					},
				},
			},
		},
		{
			name: "NumComparison",
			pos:  position{line: 108, col: 1, offset: 3441},
			expr: &choiceExpr{
				pos: position{line: 108, col: 18, offset: 3458},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 108, col: 18, offset: 3458},
						run: (*parser).callonNumComparison2,
						expr: &seqExpr{
							pos: position{line: 108, col: 18, offset: 3458},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 108, col: 18, offset: 3458},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 20, offset: 3460},
										name: "NumExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 108, col: 28, offset: 3468},
									name: "LESSEQ",
								},
								&labeledExpr{
									pos:   position{line: 108, col: 35, offset: 3475},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 37, offset: 3477},
										name: "NumExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 111, col: 18, offset: 3612},
						run: (*parser).callonNumComparison9,
						expr: &seqExpr{
							pos: position{line: 111, col: 18, offset: 3612},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 111, col: 18, offset: 3612},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 20, offset: 3614},
										name: "NumExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 111, col: 28, offset: 3622},
									name: "LESS",
								},
								&labeledExpr{
									pos:   position{line: 111, col: 33, offset: 3627},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 35, offset: 3629},
										name: "NumExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 114, col: 18, offset: 3775},
						run: (*parser).callonNumComparison16,
						expr: &seqExpr{
							pos: position{line: 114, col: 18, offset: 3775},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 114, col: 18, offset: 3775},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 20, offset: 3777},
										name: "NumExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 114, col: 28, offset: 3785},
									name: "EQ",
								},
								&labeledExpr{
									pos:   position{line: 114, col: 31, offset: 3788},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 33, offset: 3790},
										name: "NumExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 117, col: 18, offset: 3921},
						run: (*parser).callonNumComparison23,
						expr: &seqExpr{
							pos: position{line: 117, col: 18, offset: 3921},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 117, col: 18, offset: 3921},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 117, col: 20, offset: 3923},
										name: "NumExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 117, col: 28, offset: 3931},
									name: "GREATEQ",
								},
								&labeledExpr{
									pos:   position{line: 117, col: 36, offset: 3939},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 117, col: 38, offset: 3941},
										name: "NumExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 120, col: 18, offset: 4079},
						run: (*parser).callonNumComparison30,
						expr: &seqExpr{
							pos: position{line: 120, col: 18, offset: 4079},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 120, col: 18, offset: 4079},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 120, col: 20, offset: 4081},
										name: "NumExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 120, col: 28, offset: 4089},
									name: "GREATER",
								},
								&labeledExpr{
									pos:   position{line: 120, col: 36, offset: 4097},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 120, col: 38, offset: 4099},
										name: "NumExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 123, col: 11, offset: 4228},
						run: (*parser).callonNumComparison37,
						expr: &seqExpr{
							pos: position{line: 123, col: 11, offset: 4228},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 123, col: 11, offset: 4228},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 123, col: 13, offset: 4230},
										name: "NumExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 123, col: 21, offset: 4238},
									name: "NEQ",
								},
								&labeledExpr{
									pos:   position{line: 123, col: 25, offset: 4242},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 123, col: 27, offset: 4244},
										name: "NumExpr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StrComparison",
			pos:  position{line: 127, col: 1, offset: 4362},
			expr: &actionExpr{
				pos: position{line: 127, col: 18, offset: 4379},
				run: (*parser).callonStrComparison1,
				expr: &seqExpr{
					pos: position{line: 127, col: 18, offset: 4379},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 127, col: 18, offset: 4379},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 20, offset: 4381},
								name: "StrExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 28, offset: 4389},
							name: "SEQ",
						},
						&labeledExpr{
							pos:   position{line: 127, col: 33, offset: 4394},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 35, offset: 4396},
								name: "StrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "NumExpr",
			pos:  position{line: 133, col: 1, offset: 4553},
			expr: &actionExpr{
				pos: position{line: 133, col: 13, offset: 4565},
				run: (*parser).callonNumExpr1,
				expr: &seqExpr{
					pos: position{line: 133, col: 13, offset: 4565},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 133, col: 13, offset: 4565},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 15, offset: 4567},
								name: "Mults",
							},
						},
						&labeledExpr{
							pos:   position{line: 133, col: 21, offset: 4573},
							label: "b",
							expr: &zeroOrMoreExpr{
								pos: position{line: 133, col: 24, offset: 4576},
								expr: &ruleRefExpr{
									pos:  position{line: 133, col: 24, offset: 4576},
									name: "Plus",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Plus",
			pos:  position{line: 149, col: 1, offset: 5072},
			expr: &choiceExpr{
				pos: position{line: 149, col: 12, offset: 5083},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 149, col: 12, offset: 5083},
						run: (*parser).callonPlus2,
						expr: &seqExpr{
							pos: position{line: 149, col: 12, offset: 5083},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 149, col: 12, offset: 5083},
									name: "PLUS",
								},
								&labeledExpr{
									pos:   position{line: 149, col: 17, offset: 5088},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 19, offset: 5090},
										name: "Mults",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 150, col: 12, offset: 5143},
						run: (*parser).callonPlus7,
						expr: &seqExpr{
							pos: position{line: 150, col: 12, offset: 5143},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 150, col: 12, offset: 5143},
									name: "MINUS",
								},
								&labeledExpr{
									pos:   position{line: 150, col: 18, offset: 5149},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 20, offset: 5151},
										name: "Mults",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Mults",
			pos:  position{line: 152, col: 1, offset: 5197},
			expr: &actionExpr{
				pos: position{line: 152, col: 13, offset: 5209},
				run: (*parser).callonMults1,
				expr: &seqExpr{
					pos: position{line: 152, col: 13, offset: 5209},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 152, col: 13, offset: 5209},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 15, offset: 5211},
								name: "BasicNumExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 152, col: 28, offset: 5224},
							label: "b",
							expr: &zeroOrMoreExpr{
								pos: position{line: 152, col: 31, offset: 5227},
								expr: &ruleRefExpr{
									pos:  position{line: 152, col: 31, offset: 5227},
									name: "MoreMults",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MoreMults",
			pos:  position{line: 158, col: 1, offset: 5397},
			expr: &choiceExpr{
				pos: position{line: 158, col: 14, offset: 5410},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 158, col: 14, offset: 5410},
						run: (*parser).callonMoreMults2,
						expr: &seqExpr{
							pos: position{line: 158, col: 14, offset: 5410},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 158, col: 14, offset: 5410},
									name: "MULT",
								},
								&labeledExpr{
									pos:   position{line: 158, col: 19, offset: 5415},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 158, col: 21, offset: 5417},
										name: "BasicNumExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 164, col: 14, offset: 5688},
						run: (*parser).callonMoreMults7,
						expr: &seqExpr{
							pos: position{line: 164, col: 14, offset: 5688},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 164, col: 14, offset: 5688},
									name: "DIV",
								},
								&labeledExpr{
									pos:   position{line: 164, col: 18, offset: 5692},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 164, col: 20, offset: 5694},
										name: "BasicNumExpr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BasicNumExpr",
			pos:  position{line: 171, col: 1, offset: 5958},
			expr: &choiceExpr{
				pos: position{line: 171, col: 17, offset: 5974},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 171, col: 17, offset: 5974},
						run: (*parser).callonBasicNumExpr2,
						expr: &labeledExpr{
							pos:   position{line: 171, col: 17, offset: 5974},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 19, offset: 5976},
								name: "AtomicNum",
							},
						},
					},
					&actionExpr{
						pos: position{line: 172, col: 10, offset: 6051},
						run: (*parser).callonBasicNumExpr5,
						expr: &seqExpr{
							pos: position{line: 172, col: 10, offset: 6051},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 172, col: 10, offset: 6051},
									val:        "(",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 172, col: 14, offset: 6055},
									expr: &ruleRefExpr{
										pos:  position{line: 172, col: 14, offset: 6055},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 172, col: 17, offset: 6058},
									label: "n",
									expr: &ruleRefExpr{
										pos:  position{line: 172, col: 19, offset: 6060},
										name: "NumExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 172, col: 27, offset: 6068},
									val:        ")",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 172, col: 31, offset: 6072},
									expr: &ruleRefExpr{
										pos:  position{line: 172, col: 31, offset: 6072},
										name: "_",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StrExpr",
			pos:  position{line: 176, col: 1, offset: 6124},
			expr: &actionExpr{
				pos: position{line: 176, col: 12, offset: 6135},
				run: (*parser).callonStrExpr1,
				expr: &seqExpr{
					pos: position{line: 176, col: 12, offset: 6135},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 176, col: 12, offset: 6135},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 14, offset: 6137},
								name: "BasicStrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 176, col: 27, offset: 6150},
							label: "b",
							expr: &zeroOrMoreExpr{
								pos: position{line: 176, col: 30, offset: 6153},
								expr: &ruleRefExpr{
									pos:  position{line: 176, col: 30, offset: 6153},
									name: "MoreStr",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MoreStr",
			pos:  position{line: 190, col: 1, offset: 6578},
			expr: &actionExpr{
				pos: position{line: 190, col: 12, offset: 6589},
				run: (*parser).callonMoreStr1,
				expr: &seqExpr{
					pos: position{line: 190, col: 12, offset: 6589},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 190, col: 12, offset: 6589},
							name: "STRCONCAT",
						},
						&labeledExpr{
							pos:   position{line: 190, col: 22, offset: 6599},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 24, offset: 6601},
								name: "BasicStrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "BasicStrExpr",
			pos:  position{line: 197, col: 1, offset: 6832},
			expr: &choiceExpr{
				pos: position{line: 197, col: 17, offset: 6848},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 197, col: 17, offset: 6848},
						run: (*parser).callonBasicStrExpr2,
						expr: &seqExpr{
							pos: position{line: 197, col: 17, offset: 6848},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 197, col: 17, offset: 6848},
									val:        "(",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 197, col: 21, offset: 6852},
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 21, offset: 6852},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 197, col: 24, offset: 6855},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 26, offset: 6857},
										name: "StrExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 197, col: 34, offset: 6865},
									val:        ")",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 197, col: 38, offset: 6869},
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 38, offset: 6869},
										name: "_",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 198, col: 14, offset: 6903},
						run: (*parser).callonBasicStrExpr12,
						expr: &labeledExpr{
							pos:   position{line: 198, col: 14, offset: 6903},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 16, offset: 6905},
								name: "AtomicStr",
							},
						},
					},
				},
			},
		},
		{
			name: "AtomicBool",
			pos:  position{line: 202, col: 1, offset: 6972},
			expr: &choiceExpr{
				pos: position{line: 202, col: 15, offset: 6986},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 202, col: 15, offset: 6986},
						run: (*parser).callonAtomicBool2,
						expr: &labeledExpr{
							pos:   position{line: 202, col: 15, offset: 6986},
							label: "co",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 18, offset: 6989},
								name: "ConstBool",
							},
						},
					},
					&actionExpr{
						pos: position{line: 203, col: 10, offset: 7031},
						run: (*parser).callonAtomicBool5,
						expr: &seqExpr{
							pos: position{line: 203, col: 10, offset: 7031},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 203, col: 10, offset: 7031},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 203, col: 12, offset: 7033},
										name: "StreamExpr",
									},
								},
								&notExpr{
									pos: position{line: 203, col: 23, offset: 7044},
									expr: &ruleRefExpr{
										pos:  position{line: 203, col: 24, offset: 7045},
										name: "OtherOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 204, col: 10, offset: 7284},
						run: (*parser).callonAtomicBool11,
						expr: &labeledExpr{
							pos:   position{line: 204, col: 10, offset: 7284},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 12, offset: 7286},
								name: "FuncApp",
							},
						},
					},
				},
			},
		},
		{
			name: "AtomicNum",
			pos:  position{line: 206, col: 1, offset: 7320},
			expr: &choiceExpr{
				pos: position{line: 206, col: 15, offset: 7334},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 206, col: 15, offset: 7334},
						run: (*parser).callonAtomicNum2,
						expr: &labeledExpr{
							pos:   position{line: 206, col: 15, offset: 7334},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 206, col: 17, offset: 7336},
								name: "StreamExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 207, col: 17, offset: 7414},
						run: (*parser).callonAtomicNum5,
						expr: &labeledExpr{
							pos:   position{line: 207, col: 17, offset: 7414},
							label: "co",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 20, offset: 7417},
								name: "ConstNum",
							},
						},
					},
					&actionExpr{
						pos: position{line: 208, col: 10, offset: 7454},
						run: (*parser).callonAtomicNum8,
						expr: &labeledExpr{
							pos:   position{line: 208, col: 10, offset: 7454},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 12, offset: 7456},
								name: "FuncApp",
							},
						},
					},
				},
			},
		},
		{
			name: "AtomicStr",
			pos:  position{line: 210, col: 1, offset: 7483},
			expr: &choiceExpr{
				pos: position{line: 210, col: 15, offset: 7497},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 210, col: 15, offset: 7497},
						run: (*parser).callonAtomicStr2,
						expr: &labeledExpr{
							pos:   position{line: 210, col: 15, offset: 7497},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 17, offset: 7499},
								name: "StreamExpr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 211, col: 17, offset: 7577},
						run: (*parser).callonAtomicStr5,
						expr: &labeledExpr{
							pos:   position{line: 211, col: 17, offset: 7577},
							label: "co",
							expr: &ruleRefExpr{
								pos:  position{line: 211, col: 20, offset: 7580},
								name: "ConstStr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 212, col: 10, offset: 7617},
						run: (*parser).callonAtomicStr8,
						expr: &labeledExpr{
							pos:   position{line: 212, col: 10, offset: 7617},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 212, col: 12, offset: 7619},
								name: "FuncApp",
							},
						},
					},
				},
			},
		},
		{
			name: "StreamExpr",
			pos:  position{line: 215, col: 1, offset: 7670},
			expr: &choiceExpr{
				pos: position{line: 215, col: 15, offset: 7684},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 215, col: 15, offset: 7684},
						run: (*parser).callonStreamExpr2,
						expr: &seqExpr{
							pos: position{line: 215, col: 15, offset: 7684},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 215, col: 15, offset: 7684},
									label: "n",
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 17, offset: 7686},
										name: "Name",
									},
								},
								&litMatcher{
									pos:        position{line: 215, col: 22, offset: 7691},
									val:        "[",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 215, col: 26, offset: 7695},
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 26, offset: 7695},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 215, col: 29, offset: 7698},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 31, offset: 7700},
										name: "OffsetExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 215, col: 42, offset: 7711},
									val:        "|",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 215, col: 46, offset: 7715},
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 46, offset: 7715},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 215, col: 49, offset: 7718},
									label: "co",
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 52, offset: 7721},
										name: "Constant",
									},
								},
								&litMatcher{
									pos:        position{line: 215, col: 61, offset: 7730},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 215, col: 65, offset: 7734},
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 65, offset: 7734},
										name: "_",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 216, col: 10, offset: 7795},
						run: (*parser).callonStreamExpr19,
						expr: &labeledExpr{
							pos:   position{line: 216, col: 10, offset: 7795},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 12, offset: 7797},
								name: "Name",
							},
						},
					},
				},
			},
		},
		{
			name: "OffsetExpr",
			pos:  position{line: 218, col: 1, offset: 7883},
			expr: &actionExpr{
				pos: position{line: 218, col: 15, offset: 7897},
				run: (*parser).callonOffsetExpr1,
				expr: &seqExpr{
					pos: position{line: 218, col: 15, offset: 7897},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 218, col: 15, offset: 7897},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 17, offset: 7899},
								name: "NumLiteral",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 218, col: 28, offset: 7910},
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 28, offset: 7910},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "Constant",
			pos:  position{line: 221, col: 1, offset: 8017},
			expr: &choiceExpr{
				pos: position{line: 221, col: 13, offset: 8029},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 221, col: 13, offset: 8029},
						run: (*parser).callonConstant2,
						expr: &labeledExpr{
							pos:   position{line: 221, col: 13, offset: 8029},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 15, offset: 8031},
								name: "ConstBool",
							},
						},
					},
					&actionExpr{
						pos: position{line: 222, col: 8, offset: 8063},
						run: (*parser).callonConstant5,
						expr: &labeledExpr{
							pos:   position{line: 222, col: 8, offset: 8063},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 10, offset: 8065},
								name: "ConstNum",
							},
						},
					},
					&actionExpr{
						pos: position{line: 223, col: 8, offset: 8096},
						run: (*parser).callonConstant8,
						expr: &labeledExpr{
							pos:   position{line: 223, col: 8, offset: 8096},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 10, offset: 8098},
								name: "ConstStr",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstBool",
			pos:  position{line: 227, col: 1, offset: 8272},
			expr: &choiceExpr{
				pos: position{line: 227, col: 14, offset: 8285},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 227, col: 14, offset: 8285},
						run: (*parser).callonConstBool2,
						expr: &seqExpr{
							pos: position{line: 227, col: 14, offset: 8285},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 227, col: 14, offset: 8285},
									name: "TRUE",
								},
								&zeroOrOneExpr{
									pos: position{line: 227, col: 20, offset: 8291},
									expr: &ruleRefExpr{
										pos:  position{line: 227, col: 20, offset: 8291},
										name: "_",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 228, col: 14, offset: 8392},
						run: (*parser).callonConstBool7,
						expr: &seqExpr{
							pos: position{line: 228, col: 14, offset: 8392},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 228, col: 14, offset: 8392},
									name: "FALSE",
								},
								&zeroOrOneExpr{
									pos: position{line: 228, col: 21, offset: 8399},
									expr: &ruleRefExpr{
										pos:  position{line: 228, col: 21, offset: 8399},
										name: "_",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConstNum",
			pos:  position{line: 230, col: 1, offset: 8464},
			expr: &actionExpr{
				pos: position{line: 230, col: 13, offset: 8476},
				run: (*parser).callonConstNum1,
				expr: &seqExpr{
					pos: position{line: 230, col: 13, offset: 8476},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 230, col: 13, offset: 8476},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 15, offset: 8478},
								name: "NumLiteral",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 230, col: 26, offset: 8489},
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 26, offset: 8489},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstStr",
			pos:  position{line: 232, col: 1, offset: 8654},
			expr: &actionExpr{
				pos: position{line: 232, col: 13, offset: 8666},
				run: (*parser).callonConstStr1,
				expr: &seqExpr{
					pos: position{line: 232, col: 13, offset: 8666},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 232, col: 13, offset: 8666},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 15, offset: 8668},
								name: "QuotedString",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 232, col: 28, offset: 8681},
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 28, offset: 8681},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstExpr",
			pos:  position{line: 234, col: 1, offset: 8712},
			expr: &actionExpr{
				pos: position{line: 234, col: 14, offset: 8725},
				run: (*parser).callonConstExpr1,
				expr: &labeledExpr{
					pos:   position{line: 234, col: 14, offset: 8725},
					label: "n",
					expr: &ruleRefExpr{
						pos:  position{line: 234, col: 16, offset: 8727},
						name: "Name",
					},
				},
			},
		},
		{
			name: "FuncApp",
			pos:  position{line: 236, col: 1, offset: 8751},
			expr: &seqExpr{
				pos: position{line: 236, col: 12, offset: 8762},
				exprs: []interface{}{
					&labeledExpr{
						pos:   position{line: 236, col: 12, offset: 8762},
						label: "n",
						expr: &ruleRefExpr{
							pos:  position{line: 236, col: 14, offset: 8764},
							name: "Name",
						},
					},
					&litMatcher{
						pos:        position{line: 236, col: 19, offset: 8769},
						val:        "(",
						ignoreCase: false,
					},
					&labeledExpr{
						pos:   position{line: 236, col: 23, offset: 8773},
						label: "p",
						expr: &ruleRefExpr{
							pos:  position{line: 236, col: 26, offset: 8776},
							name: "ActualParams",
						},
					},
					&litMatcher{
						pos:        position{line: 236, col: 40, offset: 8790},
						val:        ")",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ActualParams",
			pos:  position{line: 238, col: 1, offset: 8795},
			expr: &choiceExpr{
				pos: position{line: 238, col: 17, offset: 8811},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 238, col: 17, offset: 8811},
						exprs: []interface{}{
							&labeledExpr{
								pos:   position{line: 238, col: 17, offset: 8811},
								label: "e",
								expr: &ruleRefExpr{
									pos:  position{line: 238, col: 19, offset: 8813},
									name: "Expr",
								},
							},
							&litMatcher{
								pos:        position{line: 238, col: 24, offset: 8818},
								val:        ",",
								ignoreCase: false,
							},
							&labeledExpr{
								pos:   position{line: 238, col: 28, offset: 8822},
								label: "a",
								expr: &ruleRefExpr{
									pos:  position{line: 238, col: 30, offset: 8824},
									name: "ActualParams",
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 239, col: 10, offset: 8846},
						label: "e",
						expr: &ruleRefExpr{
							pos:  position{line: 239, col: 12, offset: 8848},
							name: "Expr",
						},
					},
				},
			},
		},
		{
			name: "NumLiteral",
			pos:  position{line: 241, col: 1, offset: 8854},
			expr: &actionExpr{
				pos: position{line: 241, col: 15, offset: 8868},
				run: (*parser).callonNumLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 241, col: 15, offset: 8868},
					label: "p",
					expr: &seqExpr{
						pos: position{line: 241, col: 18, offset: 8871},
						exprs: []interface{}{
							&zeroOrOneExpr{
								pos: position{line: 241, col: 18, offset: 8871},
								expr: &litMatcher{
									pos:        position{line: 241, col: 19, offset: 8872},
									val:        "-",
									ignoreCase: false,
								},
							},
							&oneOrMoreExpr{
								pos: position{line: 241, col: 24, offset: 8877},
								expr: &charClassMatcher{
									pos:        position{line: 241, col: 24, offset: 8877},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 241, col: 30, offset: 8883},
								expr: &seqExpr{
									pos: position{line: 241, col: 31, offset: 8884},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 241, col: 31, offset: 8884},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 241, col: 34, offset: 8887},
											expr: &charClassMatcher{
												pos:        position{line: 241, col: 34, offset: 8887},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 253, col: 1, offset: 9255},
			expr: &choiceExpr{
				pos: position{line: 253, col: 9, offset: 9263},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 253, col: 9, offset: 9263},
						run: (*parser).callonType2,
						expr: &ruleRefExpr{
							pos:  position{line: 253, col: 9, offset: 9263},
							name: "NUM",
						},
					},
					&actionExpr{
						pos: position{line: 254, col: 9, offset: 9301},
						run: (*parser).callonType4,
						expr: &ruleRefExpr{
							pos:  position{line: 254, col: 9, offset: 9301},
							name: "BOOL",
						},
					},
					&actionExpr{
						pos: position{line: 255, col: 9, offset: 9339},
						run: (*parser).callonType6,
						expr: &ruleRefExpr{
							pos:  position{line: 255, col: 9, offset: 9339},
							name: "STRING",
						},
					},
				},
			},
		},
		{
			name: "Name",
			pos:  position{line: 257, col: 1, offset: 9370},
			expr: &actionExpr{
				pos: position{line: 257, col: 9, offset: 9378},
				run: (*parser).callonName1,
				expr: &seqExpr{
					pos: position{line: 257, col: 9, offset: 9378},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 257, col: 9, offset: 9378},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 11, offset: 9380},
								name: "Identifier",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 257, col: 22, offset: 9391},
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 22, offset: 9391},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 259, col: 1, offset: 9425},
			expr: &actionExpr{
				pos: position{line: 259, col: 17, offset: 9441},
				run: (*parser).callonQuotedString1,
				expr: &seqExpr{
					pos: position{line: 259, col: 18, offset: 9442},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 259, col: 18, offset: 9442},
							val:        "\"",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 259, col: 23, offset: 9447},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 259, col: 23, offset: 9447},
									expr: &charClassMatcher{
										pos:        position{line: 259, col: 23, offset: 9447},
										val:        "[^'\"''\\\\']",
										chars:      []rune{'\'', '"', '\'', '\'', '\\', '\''},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 259, col: 34, offset: 9458},
									expr: &seqExpr{
										pos: position{line: 259, col: 35, offset: 9459},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 259, col: 35, offset: 9459},
												val:        "\\",
												ignoreCase: false,
											},
											&anyMatcher{
												line: 259, col: 39, offset: 9463,
											},
											&zeroOrMoreExpr{
												pos: position{line: 259, col: 40, offset: 9464},
												expr: &charClassMatcher{
													pos:        position{line: 259, col: 40, offset: 9464},
													val:        "[^'\"''\\\\']",
													chars:      []rune{'\'', '"', '\'', '\'', '\\', '\''},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 259, col: 55, offset: 9479},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JSONPath",
			pos:  position{line: 265, col: 1, offset: 9649},
			expr: &actionExpr{
				pos: position{line: 265, col: 13, offset: 9661},
				run: (*parser).callonJSONPath1,
				expr: &seqExpr{
					pos: position{line: 265, col: 14, offset: 9662},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 265, col: 14, offset: 9662},
							expr: &charClassMatcher{
								pos:        position{line: 265, col: 14, offset: 9662},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 265, col: 26, offset: 9674},
							expr: &seqExpr{
								pos: position{line: 265, col: 27, offset: 9675},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 265, col: 27, offset: 9675},
										val:        ".",
										ignoreCase: false,
									},
									&oneOrMoreExpr{
										pos: position{line: 265, col: 30, offset: 9678},
										expr: &charClassMatcher{
											pos:        position{line: 265, col: 30, offset: 9678},
											val:        "[a-zA-Z0-9]",
											ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 269, col: 1, offset: 9744},
			expr: &actionExpr{
				pos: position{line: 269, col: 15, offset: 9758},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 269, col: 16, offset: 9759},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 269, col: 16, offset: 9759},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 269, col: 24, offset: 9767},
							expr: &charClassMatcher{
								pos:        position{line: 269, col: 24, offset: 9767},
								val:        "['_''-''@'a-zA-Z0-9]",
								chars:      []rune{'\'', '_', '\'', '\'', '@', '\''},
								ranges:     []rune{'\'', '\'', 'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 274, col: 1, offset: 9916},
			expr: &oneOrMoreExpr{
				pos: position{line: 274, col: 14, offset: 9929},
				expr: &charClassMatcher{
					pos:        position{line: 274, col: 14, offset: 9929},
					val:        "[a-zA-Z0-9'#''_''-''@']",
					chars:      []rune{'\'', '#', '\'', '\'', '_', '\'', '\'', '@', '\''},
					ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9', '\'', '\''},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 276, col: 1, offset: 9956},
			expr: &actionExpr{
				pos: position{line: 276, col: 13, offset: 9968},
				run: (*parser).callonAlphanum1,
				expr: &oneOrMoreExpr{
					pos: position{line: 276, col: 14, offset: 9969},
					expr: &charClassMatcher{
						pos:        position{line: 276, col: 14, offset: 9969},
						val:        "[a-zA-Z0-9]",
						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name:        "Tag",
			displayName: "\"tag\"",
			pos:         position{line: 278, col: 1, offset: 10025},
			expr: &actionExpr{
				pos: position{line: 278, col: 20, offset: 10044},
				run: (*parser).callonTag1,
				expr: &seqExpr{
					pos: position{line: 278, col: 22, offset: 10046},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 278, col: 22, offset: 10046},
							val:        "#",
							ignoreCase: false,
						},
						&charClassMatcher{
							pos:        position{line: 278, col: 25, offset: 10049},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 278, col: 33, offset: 10057},
							expr: &charClassMatcher{
								pos:        position{line: 278, col: 34, offset: 10058},
								val:        "['_''-''.'a-zA-Z0-9]",
								chars:      []rune{'\'', '_', '\'', '\'', '.', '\''},
								ranges:     []rune{'\'', '\'', 'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 280, col: 1, offset: 10122},
			expr: &choiceExpr{
				pos: position{line: 280, col: 19, offset: 10140},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 280, col: 19, offset: 10140},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 280, col: 19, offset: 10140},
								expr: &charClassMatcher{
									pos:        position{line: 280, col: 19, offset: 10140},
									val:        "[ \\t\\n\\r]",
									chars:      []rune{' ', '\t', '\n', '\r'},
									ignoreCase: false,
									inverted:   false,
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 280, col: 30, offset: 10151},
								expr: &ruleRefExpr{
									pos:  position{line: 280, col: 30, offset: 10151},
									name: "_",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 281, col: 16, offset: 10169},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 281, col: 16, offset: 10169},
								expr: &ruleRefExpr{
									pos:  position{line: 281, col: 16, offset: 10169},
									name: "Comment",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 281, col: 25, offset: 10178},
								expr: &ruleRefExpr{
									pos:  position{line: 281, col: 25, offset: 10178},
									name: "_",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 284, col: 1, offset: 10245},
			expr: &choiceExpr{
				pos: position{line: 284, col: 13, offset: 10257},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 284, col: 13, offset: 10257},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 284, col: 22, offset: 10266},
						val:        "\n\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 284, col: 31, offset: 10275},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 284, col: 38, offset: 10282},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Comment",
			pos:  position{line: 286, col: 1, offset: 10289},
			expr: &choiceExpr{
				pos: position{line: 286, col: 12, offset: 10300},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 286, col: 12, offset: 10300},
						run: (*parser).callonComment2,
						expr: &seqExpr{
							pos: position{line: 286, col: 12, offset: 10300},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 286, col: 12, offset: 10300},
									val:        "/*",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 286, col: 17, offset: 10305},
									expr: &charClassMatcher{
										pos:        position{line: 286, col: 17, offset: 10305},
										val:        "[^*/]",
										chars:      []rune{'*', '/'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 286, col: 24, offset: 10312},
									val:        "*/",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 287, col: 7, offset: 10342},
						run: (*parser).callonComment8,
						expr: &seqExpr{
							pos: position{line: 287, col: 7, offset: 10342},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 287, col: 7, offset: 10342},
									val:        "//",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 287, col: 12, offset: 10347},
									expr: &charClassMatcher{
										pos:        position{line: 287, col: 12, offset: 10347},
										val:        "[ a-zA-Z0-9'#''_''-''@'',']",
										chars:      []rune{' ', '\'', '#', '\'', '\'', '_', '\'', '\'', '@', '\'', '\'', ',', '\''},
										ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9', '\'', '\''},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&charClassMatcher{
									pos:        position{line: 287, col: 41, offset: 10376},
									val:        "[\\n\\r]",
									chars:      []rune{'\n', '\r'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherOp",
			pos:  position{line: 291, col: 1, offset: 10549},
			expr: &choiceExpr{
				pos: position{line: 291, col: 12, offset: 10560},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 291, col: 12, offset: 10560},
						name: "NumOp",
					},
					&ruleRefExpr{
						pos:  position{line: 292, col: 7, offset: 10572},
						name: "StrOp",
					},
				},
			},
		},
		{
			name: "NumOp",
			pos:  position{line: 294, col: 1, offset: 10579},
			expr: &choiceExpr{
				pos: position{line: 294, col: 10, offset: 10588},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 294, col: 10, offset: 10588},
						name: "PLUS",
					},
					&ruleRefExpr{
						pos:  position{line: 295, col: 11, offset: 10603},
						name: "MINUS",
					},
					&ruleRefExpr{
						pos:  position{line: 296, col: 5, offset: 10613},
						name: "MULT",
					},
					&ruleRefExpr{
						pos:  position{line: 297, col: 5, offset: 10622},
						name: "DIV",
					},
				},
			},
		},
		{
			name: "StrOp",
			pos:  position{line: 299, col: 1, offset: 10627},
			expr: &ruleRefExpr{
				pos:  position{line: 299, col: 10, offset: 10636},
				name: "STRCONCAT",
			},
		},
		{
			name: "EOF",
			pos:  position{line: 302, col: 1, offset: 10648},
			expr: &notExpr{
				pos: position{line: 302, col: 12, offset: 10659},
				expr: &anyMatcher{
					line: 302, col: 13, offset: 10660,
				},
			},
		},
		{
			name: "OUTPUT",
			pos:  position{line: 309, col: 1, offset: 10741},
			expr: &seqExpr{
				pos: position{line: 309, col: 11, offset: 10751},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 309, col: 11, offset: 10751},
						val:        "output",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 309, col: 20, offset: 10760},
						expr: &ruleRefExpr{
							pos:  position{line: 309, col: 20, offset: 10760},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "INPUT",
			pos:  position{line: 310, col: 1, offset: 10763},
			expr: &seqExpr{
				pos: position{line: 310, col: 11, offset: 10773},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 310, col: 11, offset: 10773},
						val:        "input",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 310, col: 19, offset: 10781},
						expr: &ruleRefExpr{
							pos:  position{line: 310, col: 19, offset: 10781},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "CONST",
			pos:  position{line: 312, col: 1, offset: 10807},
			expr: &seqExpr{
				pos: position{line: 312, col: 11, offset: 10817},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 312, col: 11, offset: 10817},
						val:        "const",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 312, col: 19, offset: 10825},
						expr: &ruleRefExpr{
							pos:  position{line: 312, col: 19, offset: 10825},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "DEFINE",
			pos:  position{line: 313, col: 1, offset: 10828},
			expr: &seqExpr{
				pos: position{line: 313, col: 11, offset: 10838},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 313, col: 11, offset: 10838},
						val:        "define",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 313, col: 20, offset: 10847},
						expr: &ruleRefExpr{
							pos:  position{line: 313, col: 20, offset: 10847},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "LET",
			pos:  position{line: 314, col: 1, offset: 10850},
			expr: &seqExpr{
				pos: position{line: 314, col: 11, offset: 10860},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 314, col: 11, offset: 10860},
						val:        "let",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 314, col: 17, offset: 10866},
						expr: &ruleRefExpr{
							pos:  position{line: 314, col: 17, offset: 10866},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "IN",
			pos:  position{line: 315, col: 1, offset: 10869},
			expr: &seqExpr{
				pos: position{line: 315, col: 11, offset: 10879},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 315, col: 11, offset: 10879},
						val:        "in",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 315, col: 16, offset: 10884},
						expr: &ruleRefExpr{
							pos:  position{line: 315, col: 16, offset: 10884},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "CONST",
			pos:  position{line: 317, col: 1, offset: 10907},
			expr: &seqExpr{
				pos: position{line: 317, col: 10, offset: 10916},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 317, col: 10, offset: 10916},
						val:        "const",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 317, col: 18, offset: 10924},
						name: "_",
					},
				},
			},
		},
		{
			name: "INT",
			pos:  position{line: 324, col: 1, offset: 11057},
			expr: &seqExpr{
				pos: position{line: 324, col: 11, offset: 11067},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 324, col: 11, offset: 11067},
						val:        "int",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 324, col: 17, offset: 11073},
						name: "_",
					},
				},
			},
		},
		{
			name: "NUM",
			pos:  position{line: 325, col: 1, offset: 11075},
			expr: &seqExpr{
				pos: position{line: 325, col: 11, offset: 11085},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 325, col: 11, offset: 11085},
						val:        "num",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 325, col: 17, offset: 11091},
						name: "_",
					},
				},
			},
		},
		{
			name: "BOOL",
			pos:  position{line: 326, col: 1, offset: 11093},
			expr: &seqExpr{
				pos: position{line: 326, col: 11, offset: 11103},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 326, col: 11, offset: 11103},
						val:        "bool",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 326, col: 18, offset: 11110},
						name: "_",
					},
				},
			},
		},
		{
			name: "STRING",
			pos:  position{line: 327, col: 1, offset: 11112},
			expr: &seqExpr{
				pos: position{line: 327, col: 11, offset: 11122},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 327, col: 11, offset: 11122},
						val:        "string",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 327, col: 20, offset: 11131},
						name: "_",
					},
				},
			},
		},
		{
			name: "IF",
			pos:  position{line: 328, col: 1, offset: 11133},
			expr: &seqExpr{
				pos: position{line: 328, col: 9, offset: 11141},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 328, col: 9, offset: 11141},
						val:        "if",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 328, col: 14, offset: 11146},
						name: "_",
					},
				},
			},
		},
		{
			name: "THEN",
			pos:  position{line: 329, col: 1, offset: 11148},
			expr: &seqExpr{
				pos: position{line: 329, col: 9, offset: 11156},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 329, col: 9, offset: 11156},
						val:        "then",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 329, col: 16, offset: 11163},
						name: "_",
					},
				},
			},
		},
		{
			name: "ELSE",
			pos:  position{line: 330, col: 1, offset: 11165},
			expr: &seqExpr{
				pos: position{line: 330, col: 9, offset: 11173},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 330, col: 9, offset: 11173},
						val:        "else",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 330, col: 16, offset: 11180},
						name: "_",
					},
				},
			},
		},
		{
			name: "ASSIGN",
			pos:  position{line: 331, col: 1, offset: 11182},
			expr: &seqExpr{
				pos: position{line: 331, col: 11, offset: 11192},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 331, col: 11, offset: 11192},
						val:        "=",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 331, col: 15, offset: 11196},
						expr: &ruleRefExpr{
							pos:  position{line: 331, col: 15, offset: 11196},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "TRUE",
			pos:  position{line: 332, col: 1, offset: 11199},
			expr: &seqExpr{
				pos: position{line: 332, col: 9, offset: 11207},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 332, col: 9, offset: 11207},
						val:        "true",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 332, col: 16, offset: 11214},
						expr: &ruleRefExpr{
							pos:  position{line: 332, col: 16, offset: 11214},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "FALSE",
			pos:  position{line: 333, col: 1, offset: 11217},
			expr: &seqExpr{
				pos: position{line: 333, col: 10, offset: 11226},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 333, col: 10, offset: 11226},
						val:        "false",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 333, col: 18, offset: 11234},
						expr: &ruleRefExpr{
							pos:  position{line: 333, col: 18, offset: 11234},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 334, col: 1, offset: 11237},
			expr: &seqExpr{
				pos: position{line: 334, col: 8, offset: 11244},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 334, col: 8, offset: 11244},
						val:        "and",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 334, col: 14, offset: 11250},
						expr: &ruleRefExpr{
							pos:  position{line: 334, col: 14, offset: 11250},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 335, col: 1, offset: 11264},
			expr: &seqExpr{
				pos: position{line: 335, col: 7, offset: 11270},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 335, col: 7, offset: 11270},
						val:        "or",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 335, col: 12, offset: 11275},
						expr: &ruleRefExpr{
							pos:  position{line: 335, col: 12, offset: 11275},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 336, col: 1, offset: 11289},
			expr: &seqExpr{
				pos: position{line: 336, col: 8, offset: 11296},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 336, col: 8, offset: 11296},
						val:        "not",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 336, col: 14, offset: 11302},
						expr: &ruleRefExpr{
							pos:  position{line: 336, col: 14, offset: 11302},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "PLUS",
			pos:  position{line: 338, col: 1, offset: 11315},
			expr: &seqExpr{
				pos: position{line: 338, col: 9, offset: 11323},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 338, col: 9, offset: 11323},
						val:        "+",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 338, col: 13, offset: 11327},
						expr: &ruleRefExpr{
							pos:  position{line: 338, col: 13, offset: 11327},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "MINUS",
			pos:  position{line: 339, col: 1, offset: 11330},
			expr: &seqExpr{
				pos: position{line: 339, col: 10, offset: 11339},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 339, col: 10, offset: 11339},
						val:        "-",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 339, col: 14, offset: 11343},
						expr: &ruleRefExpr{
							pos:  position{line: 339, col: 14, offset: 11343},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "MULT",
			pos:  position{line: 340, col: 1, offset: 11346},
			expr: &seqExpr{
				pos: position{line: 340, col: 9, offset: 11354},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 340, col: 9, offset: 11354},
						val:        "*",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 340, col: 13, offset: 11358},
						expr: &ruleRefExpr{
							pos:  position{line: 340, col: 13, offset: 11358},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "DIV",
			pos:  position{line: 341, col: 1, offset: 11361},
			expr: &seqExpr{
				pos: position{line: 341, col: 8, offset: 11368},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 341, col: 8, offset: 11368},
						val:        "/",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 341, col: 12, offset: 11372},
						expr: &ruleRefExpr{
							pos:  position{line: 341, col: 12, offset: 11372},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "LESSEQ",
			pos:  position{line: 343, col: 1, offset: 11376},
			expr: &seqExpr{
				pos: position{line: 343, col: 11, offset: 11386},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 343, col: 11, offset: 11386},
						val:        "<=",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 343, col: 16, offset: 11391},
						expr: &ruleRefExpr{
							pos:  position{line: 343, col: 16, offset: 11391},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "LESS",
			pos:  position{line: 344, col: 1, offset: 11394},
			expr: &seqExpr{
				pos: position{line: 344, col: 9, offset: 11402},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 344, col: 9, offset: 11402},
						val:        "<",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 344, col: 13, offset: 11406},
						expr: &ruleRefExpr{
							pos:  position{line: 344, col: 13, offset: 11406},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GREATEQ",
			pos:  position{line: 345, col: 1, offset: 11409},
			expr: &seqExpr{
				pos: position{line: 345, col: 12, offset: 11420},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 345, col: 12, offset: 11420},
						val:        ">=",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 345, col: 17, offset: 11425},
						expr: &ruleRefExpr{
							pos:  position{line: 345, col: 17, offset: 11425},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GREATER",
			pos:  position{line: 346, col: 1, offset: 11428},
			expr: &seqExpr{
				pos: position{line: 346, col: 12, offset: 11439},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 346, col: 12, offset: 11439},
						val:        ">",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 346, col: 16, offset: 11443},
						expr: &ruleRefExpr{
							pos:  position{line: 346, col: 16, offset: 11443},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "EQ",
			pos:  position{line: 347, col: 1, offset: 11446},
			expr: &seqExpr{
				pos: position{line: 347, col: 7, offset: 11452},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 347, col: 7, offset: 11452},
						val:        "==",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 347, col: 12, offset: 11457},
						expr: &ruleRefExpr{
							pos:  position{line: 347, col: 12, offset: 11457},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "NEQ",
			pos:  position{line: 348, col: 1, offset: 11460},
			expr: &seqExpr{
				pos: position{line: 348, col: 8, offset: 11467},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 348, col: 8, offset: 11467},
						val:        "!=",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 348, col: 13, offset: 11472},
						expr: &ruleRefExpr{
							pos:  position{line: 348, col: 13, offset: 11472},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "SEQ",
			pos:  position{line: 350, col: 1, offset: 11476},
			expr: &seqExpr{
				pos: position{line: 350, col: 8, offset: 11483},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 350, col: 8, offset: 11483},
						val:        "sEq",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 350, col: 15, offset: 11490},
						expr: &ruleRefExpr{
							pos:  position{line: 350, col: 15, offset: 11490},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "LAZY",
			pos:  position{line: 352, col: 1, offset: 11494},
			expr: &seqExpr{
				pos: position{line: 352, col: 9, offset: 11502},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 352, col: 9, offset: 11502},
						val:        "lazy",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 352, col: 16, offset: 11509},
						expr: &ruleRefExpr{
							pos:  position{line: 352, col: 16, offset: 11509},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "EVAL",
			pos:  position{line: 353, col: 1, offset: 11512},
			expr: &seqExpr{
				pos: position{line: 353, col: 9, offset: 11520},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 353, col: 9, offset: 11520},
						val:        "eval",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 353, col: 16, offset: 11527},
						expr: &ruleRefExpr{
							pos:  position{line: 353, col: 16, offset: 11527},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "STRCONCAT",
			pos:  position{line: 355, col: 1, offset: 11531},
			expr: &seqExpr{
				pos: position{line: 355, col: 14, offset: 11544},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 355, col: 14, offset: 11544},
						val:        "sConcat",
						ignoreCase: false,
					},
					&zeroOrOneExpr{
						pos: position{line: 355, col: 24, offset: 11554},
						expr: &ruleRefExpr{
							pos:  position{line: 355, col: 24, offset: 11554},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "AT",
			pos:  position{line: 357, col: 1, offset: 11558},
			expr: &litMatcher{
				pos:        position{line: 357, col: 7, offset: 11564},
				val:        "@",
				ignoreCase: false,
			},
		},
		{
			name: "CLIQUE",
			pos:  position{line: 358, col: 1, offset: 11568},
			expr: &litMatcher{
				pos:        position{line: 358, col: 11, offset: 11578},
				val:        "clique",
				ignoreCase: false,
			},
		},
		{
			name: "LINE",
			pos:  position{line: 359, col: 1, offset: 11587},
			expr: &litMatcher{
				pos:        position{line: 359, col: 9, offset: 11595},
				val:        "line",
				ignoreCase: false,
			},
		},
		{
			name: "RING",
			pos:  position{line: 360, col: 1, offset: 11602},
			expr: &litMatcher{
				pos:        position{line: 360, col: 9, offset: 11610},
				val:        "ring",
				ignoreCase: false,
			},
		},
		{
			name: "RINGSHORT",
			pos:  position{line: 361, col: 1, offset: 11617},
			expr: &litMatcher{
				pos:        position{line: 361, col: 14, offset: 11630},
				val:        "ringshort",
				ignoreCase: false,
			},
		},
		{
			name: "STAR",
			pos:  position{line: 362, col: 1, offset: 11642},
			expr: &litMatcher{
				pos:        position{line: 362, col: 9, offset: 11650},
				val:        "star",
				ignoreCase: false,
			},
		},
	},
}

func (c *current) onInput1(t, m interface{}) (interface{}, error) {
	return NewTopoMonitorDecls(t, m), nil
}

func (p *parser) callonInput1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput1(stack["t"], stack["m"])
}

func (c *current) onTopo2() (interface{}, error) {
	return Identifier{string(c.text)}, nil
}

func (p *parser) callonTopo2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopo2()
}

func (c *current) onTopo4() (interface{}, error) {
	return Identifier{string(c.text)}, nil
}

func (p *parser) callonTopo4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopo4()
}

func (c *current) onTopo6() (interface{}, error) {
	return Identifier{string(c.text)}, nil
}

func (p *parser) callonTopo6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopo6()
}

func (c *current) onTopo8() (interface{}, error) {
	return Identifier{string(c.text)}, nil
}

func (p *parser) callonTopo8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopo8()
}

func (c *current) onTopo10() (interface{}, error) {
	return Identifier{string(c.text)}, nil
}

func (p *parser) callonTopo10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopo10()
}

func (c *current) onMonitorDeclaration1(n, d interface{}) (interface{}, error) {
	return NewMonitorDecl(n, d), nil
}

func (p *parser) callonMonitorDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMonitorDeclaration1(stack["n"], stack["d"])
}

func (c *current) onDecls1(d interface{}) (interface{}, error) {
	// returns a []interface{} where all elements are
	//    Const, Input, Output, Ticks or Definitions
	return d, nil

}

func (p *parser) callonDecls1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecls1(stack["d"])
}

func (c *current) onDeclaration2(i interface{}) (interface{}, error) {
	return i, nil
}

func (p *parser) callonDeclaration2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeclaration2(stack["i"])
}

func (c *current) onDeclaration5(k interface{}) (interface{}, error) {
	return k, nil
}

func (p *parser) callonDeclaration5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeclaration5(stack["k"])
}

func (c *current) onDeclaration8(d interface{}) (interface{}, error) {
	return d, nil
}

func (p *parser) callonDeclaration8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeclaration8(stack["d"])
}

func (c *current) onConst1(t, n, e interface{}) (interface{}, error) {

	// if !checkGround(e) { return nil,err }
	return NewConstDecl(n, t, e, c.pos), nil //c.pos is a struct defined in parser.go (once generated) containing line, col and offset
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["t"], stack["n"], stack["e"])
}

func (c *current) onInputStreamDecl1(t, n interface{}) (interface{}, error) {
	return NewInputDecl(n, t, c.pos), nil
}

func (p *parser) callonInputStreamDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInputStreamDecl1(stack["t"], stack["n"])
}

func (c *current) onOutputDefinition1(d, t, n, le, e interface{}) (interface{}, error) {
	return NewOutputDefinition(n, t, le, e, c.pos), nil
}

func (p *parser) callonOutputDefinition1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOutputDefinition1(stack["d"], stack["t"], stack["n"], stack["le"], stack["e"])
}

func (c *current) onDefOut3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDefOut3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefOut3()
}

func (c *current) onLazyEval2() (interface{}, error) {
	return false, nil
}

func (p *parser) callonLazyEval2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLazyEval2()
}

func (c *current) onLazyEval4() (interface{}, error) {
	return true, nil
}

func (p *parser) callonLazyEval4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLazyEval4()
}

func (c *current) onBlock2(n, p, e, b interface{}) (interface{}, error) {
	return NewLetExpr(n, p, e, b), nil
}

func (p *parser) callonBlock2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock2(stack["n"], stack["p"], stack["e"], stack["b"])
}

func (c *current) onBlock16(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock16(stack["e"])
}

func (c *current) onExpr2(p, a, b interface{}) (interface{}, error) {
	return NewIfThenElseExpr(p, a, b), nil
}

func (p *parser) callonExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpr2(stack["p"], stack["a"], stack["b"])
}

func (c *current) onExpr13(b interface{}) (interface{}, error) {
	return b, nil
}

func (p *parser) callonExpr13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpr13(stack["b"])
}

func (c *current) onExpr16(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpr16(stack["n"])
}

func (c *current) onExpr19(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonExpr19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpr19(stack["s"])
}

func (c *current) onBooleanExpr1(a, b interface{}) (interface{}, error) {
	preds := ToSlice(b)
	if len(preds) == 0 {
		//fmt.Printf("boolean expr without or\n")
		v, err := getBoolExpr(a)
		//fmt.Printf("Error %s", err)
		if err == nil {
			//fmt.Printf("boolean NO error: %s", v.Sprint())
			return BoolExprToExpr(v), nil //old: a,nil lm:BoolExprToExpr(a), nil
		} else {
			fmt.Printf("boolean error")
			return nil, errors.New("BoolExpr: Ands expression is not boolean")
		}
	}
	fmt.Printf("boolean expr with ors")
	return BoolExprToExpr(NewOrPredicate(a, b)), nil

}

func (p *parser) callonBooleanExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanExpr1(stack["a"], stack["b"])
}

func (c *current) onOrExpr1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpr1(stack["p"])
}

func (c *current) onAnds1(a, b interface{}) (interface{}, error) {
	preds := ToSlice(b)
	if len(preds) == 0 {
		return a, nil
	}
	return BoolExprToExpr(NewAndPredicate(a, b)), nil

}

func (p *parser) callonAnds1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnds1(stack["a"], stack["b"])
}

func (c *current) onAndExpr1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpr1(stack["p"])
}

func (c *current) onNegExpr2(p interface{}) (interface{}, error) {
	return NewBooleanExpr(NewNotPredicate(p)), nil
}

func (p *parser) callonNegExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegExpr2(stack["p"])
}

func (c *current) onNegExpr7(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonNegExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegExpr7(stack["p"])
}

func (c *current) onPrimary2(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonPrimary2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary2(stack["p"])
}

func (c *current) onPrimary12(n interface{}) (interface{}, error) {
	fmt.Printf("NumComparison \n")
	return NewNumComparisonPredicate(n), nil
}

func (p *parser) callonPrimary12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary12(stack["n"])
}

func (c *current) onPrimary15(s interface{}) (interface{}, error) {
	return NewStrComparisonPredicate(s), nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["s"])
}

func (c *current) onPrimary18(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonPrimary18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary18(stack["a"])
}

func (c *current) onNumComparison2(a, b interface{}) (interface{}, error) {
	na, _ := getNumExpr(a)
	nb, _ := getNumExpr(b)
	return NewNumLessEq(na, nb), nil
}

func (p *parser) callonNumComparison2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumComparison2(stack["a"], stack["b"])
}

func (c *current) onNumComparison9(a, b interface{}) (interface{}, error) {
	na, _ := getNumExpr(a)
	nb, _ := getNumExpr(b)
	return NewNumLess(na, nb), nil
}

func (p *parser) callonNumComparison9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumComparison9(stack["a"], stack["b"])
}

func (c *current) onNumComparison16(a, b interface{}) (interface{}, error) {
	na, _ := getNumExpr(a)
	nb, _ := getNumExpr(b)
	return NewNumEq(na, nb), nil
}

func (p *parser) callonNumComparison16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumComparison16(stack["a"], stack["b"])
}

func (c *current) onNumComparison23(a, b interface{}) (interface{}, error) {
	na, _ := getNumExpr(a)
	nb, _ := getNumExpr(b)
	return NewNumGreaterEq(na, nb), nil
}

func (p *parser) callonNumComparison23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumComparison23(stack["a"], stack["b"])
}

func (c *current) onNumComparison30(a, b interface{}) (interface{}, error) {
	na, _ := getNumExpr(a)
	nb, _ := getNumExpr(b)
	return NewNumGreater(na, nb), nil
}

func (p *parser) callonNumComparison30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumComparison30(stack["a"], stack["b"])
}

func (c *current) onNumComparison37(a, b interface{}) (interface{}, error) {
	na, _ := getNumExpr(a)
	nb, _ := getNumExpr(b)
	return NewNumNotEq(na, nb), nil
}

func (p *parser) callonNumComparison37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumComparison37(stack["a"], stack["b"])
}

func (c *current) onStrComparison1(a, b interface{}) (interface{}, error) {
	na, _ := getStrExpr(a)
	nb, _ := getStrExpr(b)
	return NewStrEqExpr(na, nb), nil
}

func (p *parser) callonStrComparison1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStrComparison1(stack["a"], stack["b"])
}

func (c *current) onNumExpr1(a, b interface{}) (interface{}, error) {
	//fmt.Printf("aa")
	exprs := ToSlice(b) // common.ToSlice(b)
	if len(exprs) == 0 {
		//fmt.Printf("NumExpr of an Atom: %s\n", a)
		v, err := getNumExpr(a)
		if err == nil {
			return NumExprToExpr(v), nil //old: NumExprToExpr(a.(NumExpr)),nil lm: NumExprToExpr(getNumExpr(a))
		} else {
			return nil, errors.New("NumExpr: Mults expression is not numeric\n")
		}
	} else {
		return Flatten(a, b), nil // common.Flatten(a,b)
	}

}

func (p *parser) callonNumExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumExpr1(stack["a"], stack["b"])
}

func (c *current) onPlus2(e interface{}) (interface{}, error) {
	return NewRightPlusExpr(e), nil
}

func (p *parser) callonPlus2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPlus2(stack["e"])
}

func (c *current) onPlus7(e interface{}) (interface{}, error) {
	return NewRightMinusExpr(e), nil
}

func (p *parser) callonPlus7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPlus7(stack["e"])
}

func (c *current) onMults1(a, b interface{}) (interface{}, error) {
	exprs := ToSlice(b) // common.ToSlice(b)
	if len(exprs) == 0 {
		return a, nil
	}
	return Flatten(a, b), nil // common.Flatten(a,b)

}

func (p *parser) callonMults1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMults1(stack["a"], stack["b"])
}

func (c *current) onMoreMults2(e interface{}) (interface{}, error) {
	v, err := getNumExpr(e)
	if err == nil {
		return NewRightMultExpr(v), nil // common. NewRightMultExpr(e)
	} else {
		return nil, errors.New("MoreMults: BasicNumExpr is not numeric")
	}
}

func (p *parser) callonMoreMults2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMoreMults2(stack["e"])
}

func (c *current) onMoreMults7(e interface{}) (interface{}, error) {
	v, err := getNumExpr(e)
	if err == nil {
		return NewRightDivExpr(v), nil // common. NewRightMultExpr(e)
	} else {
		return nil, errors.New("MoreMults: BasicNumExpr is not numeric")
	}
}

func (p *parser) callonMoreMults7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMoreMults7(stack["e"])
}

func (c *current) onBasicNumExpr2(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonBasicNumExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBasicNumExpr2(stack["a"])
}

func (c *current) onBasicNumExpr5(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonBasicNumExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBasicNumExpr5(stack["n"])
}

func (c *current) onStrExpr1(a, b interface{}) (interface{}, error) {
	exprs := ToSlice(b) // common.ToSlice(b)
	if len(exprs) == 0 {
		v, err := getStrExpr(a)
		if err == nil {
			return StrExprToExpr(v), nil //old: NumExprToExpr(a.(NumExpr)),nil lm: NumExprToExpr(getNumExpr(a))
		} else {
			return nil, errors.New("StrExpr: Str expression is not string\n")
		}
	} else {
		return FlattenStr(a, b), nil // common.Flatten(a,b)
	}

}

func (p *parser) callonStrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStrExpr1(stack["a"], stack["b"])
}

func (c *current) onMoreStr1(e interface{}) (interface{}, error) {
	v, err := getStrExpr(e)
	if err == nil {
		return NewRightStrConcatExpr(v), nil
	} else {
		return nil, errors.New("MoreStr: BasicStrExpr is not string")
	}
}

func (p *parser) callonMoreStr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMoreStr1(stack["e"])
}

func (c *current) onBasicStrExpr2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonBasicStrExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBasicStrExpr2(stack["s"])
}

func (c *current) onBasicStrExpr12(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonBasicStrExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBasicStrExpr12(stack["a"])
}

func (c *current) onAtomicBool2(co interface{}) (interface{}, error) {
	return co, nil
}

func (p *parser) callonAtomicBool2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAtomicBool2(stack["co"])
}

func (c *current) onAtomicBool5(e interface{}) (interface{}, error) {
	return NewStreamOffsetExpr(e), nil
}

func (p *parser) callonAtomicBool5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAtomicBool5(stack["e"])
}

func (c *current) onAtomicBool11(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonAtomicBool11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAtomicBool11(stack["f"])
}

func (c *current) onAtomicNum2(e interface{}) (interface{}, error) {
	return NewStreamOffsetExpr(e), nil
}

func (p *parser) callonAtomicNum2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAtomicNum2(stack["e"])
}

func (c *current) onAtomicNum5(co interface{}) (interface{}, error) {
	return co, nil
}

func (p *parser) callonAtomicNum5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAtomicNum5(stack["co"])
}

func (c *current) onAtomicNum8(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonAtomicNum8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAtomicNum8(stack["f"])
}

func (c *current) onAtomicStr2(e interface{}) (interface{}, error) {
	return NewStreamOffsetExpr(e), nil
}

func (p *parser) callonAtomicStr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAtomicStr2(stack["e"])
}

func (c *current) onAtomicStr5(co interface{}) (interface{}, error) {
	return co, nil
}

func (p *parser) callonAtomicStr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAtomicStr5(stack["co"])
}

func (c *current) onAtomicStr8(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonAtomicStr8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAtomicStr8(stack["f"])
}

func (c *current) onStreamExpr2(n, t, co interface{}) (interface{}, error) {
	return NewStreamFetchExpr(n, t, co, c.pos), nil
}

func (p *parser) callonStreamExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamExpr2(stack["n"], stack["t"], stack["co"])
}

func (c *current) onStreamExpr19(n interface{}) (interface{}, error) {
	return NewStreamFetchExpr(n, NewIntLiteralExpr(0, c.pos), nil, c.pos), nil
}

func (p *parser) callonStreamExpr19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStreamExpr19(stack["n"])
}

func (c *current) onOffsetExpr1(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonOffsetExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetExpr1(stack["n"])
}

func (c *current) onConstant2(b interface{}) (interface{}, error) {
	return b, nil
}

func (p *parser) callonConstant2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstant2(stack["b"])
}

func (c *current) onConstant5(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonConstant5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstant5(stack["n"])
}

func (c *current) onConstant8(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonConstant8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstant8(stack["s"])
}

func (c *current) onConstBool2() (interface{}, error) {
	return NewTruePredicate(c.pos), nil
}

func (p *parser) callonConstBool2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstBool2()
}

func (c *current) onConstBool7() (interface{}, error) {
	return NewFalsePredicate(c.pos), nil
}

func (p *parser) callonConstBool7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstBool7()
}

func (c *current) onConstNum1(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonConstNum1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstNum1(stack["l"])
}

func (c *current) onConstStr1(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonConstStr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstStr1(stack["l"])
}

func (c *current) onConstExpr1(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonConstExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstExpr1(stack["n"])
}

func (c *current) onNumLiteral1(p interface{}) (interface{}, error) {
	if strings.Contains(string(c.text), ".") {
		//	      	 x,err := strconv.ParseFloat(p.(string),32)
		x, err := strconv.ParseFloat(string(c.text), 32)
		return NewFloatLiteralExpr(x, c.pos), err
	} else {
		x, err := strconv.ParseInt(string(c.text), 10, 32)
		return NewIntLiteralExpr(int(x), c.pos), err
	}

}

func (p *parser) callonNumLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumLiteral1(stack["p"])
}

func (c *current) onType2() (interface{}, error) {
	return NumT, nil
}

func (p *parser) callonType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onType2()
}

func (c *current) onType4() (interface{}, error) {
	return BoolT, nil
}

func (p *parser) callonType4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onType4()
}

func (c *current) onType6() (interface{}, error) {
	return StringT, nil
}

func (p *parser) callonType6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onType6()
}

func (c *current) onName1(n interface{}) (interface{}, error) {
	return n.(Identifier), nil
}

func (p *parser) callonName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onName1(stack["n"])
}

func (c *current) onQuotedString1() (interface{}, error) {
	str := string(c.text)
	inner := str[1 : len(str)-1]
	return NewStringLiteralExpr(inner, c.pos), nil //old:NewQuotedString lm:

}

func (p *parser) callonQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString1()
}

func (c *current) onJSONPath1() (interface{}, error) {
	return NewPathName(string(c.text)), nil

}

func (p *parser) callonJSONPath1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJSONPath1()
}

func (c *current) onIdentifier1() (interface{}, error) {
	// IMPORTANT: cannot have '.' to distinguish from "e.path" "e.strcmp"
	return Identifier{string(c.text)}, nil

}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onAlphanum1() (interface{}, error) {
	return Alphanum{string(c.text)}, nil
}

func (p *parser) callonAlphanum1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanum1()
}

func (c *current) onTag1() (interface{}, error) {
	return Tag{string(c.text)}, nil
}

func (p *parser) callonTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTag1()
}

func (c *current) onComment2() (interface{}, error) {
	return "", nil
}

func (p *parser) callonComment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComment2()
}

func (c *current) onComment8() (interface{}, error) {
	return "", nil
}

func (p *parser) callonComment8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComment8()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
		emptyState: make(storeDict),
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}

	// emptyState contains an empty storeDict, which is used to optimize cloneState if global "state" store is not used.
	emptyState storeDict
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	if len(p.cur.state) == 0 {
		if len(p.emptyState) > 0 {
			p.emptyState = make(storeDict)
		}
		return p.emptyState
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
